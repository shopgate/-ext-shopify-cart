swagger: '2.0'
info:
  title: Shopgate Cart Pipelines
  version: '1.0'
basePath: /
produces:
  - application/json
consumes:
  - application/json

paths:
  /getCart_v1:
    post:
      tags:
        - Cart
      description: 'Retrieves the whole cart, belonging to a customer, from a fixed endpoint, like an API.'
      responses:
        '':
          description: 'Returns the cart of the current user.'
          schema:
            $ref: '#/definitions/CartResult'
        'EUNKNOWN':
          description: 'An internal error occured.'
          schema:
            $ref: '#/definitions/UnknownError'
  /addProductsToCart_v1:
    post:
      tags:
        - Cart Products
      description: 'Adds one ore multiple products to the cart.'
      parameters:
        - $ref: '#/parameters/addProductsParam'
      responses:
        '':
          description: 'No return. The cart needs to be fetched by the frontend afterwards.'
          schema:
            $ref: '#/definitions/EmptyResult'
        'EUNKNOWN':
          description: 'An internal error occured.'
          schema:
            $ref: '#/definitions/UnknownError'
  /updateProductsInCart_v1:
    post:
      tags:
        - Cart Products
      description: 'Updates the quantity for one or multiple cart items referenced by their respective cartItemId.'
      parameters:
        - $ref: '#/parameters/updateCartItemsParam'
      responses:
        '':
          description: 'Returns an empty object after the action was performed.'
          schema:
            $ref: '#/definitions/EmptyResult'
        'EUNKNOWN':
          description: 'An internal error occured.'
          schema:
            $ref: '#/definitions/UnknownError'
  /deleteProductsFromCart_v1:
    post:
      tags:
        - Cart Products
      description: 'Deletes one or multiple cart items referenced by their respective cartItemId.'
      parameters:
        - $ref: '#/parameters/cartItemIds'
      responses:
        '':
          description: 'Returns an empty object after the action was performed.'
          schema:
            $ref: '#/definitions/EmptyResult'
        'EUNKNOWN':
          description: 'An internal error occured.'
          schema:
            $ref: '#/definitions/UnknownError'
  /addCouponsToCart_v1:
    post:
      tags:
        - Cart Coupons
      description: "Adds multiple coupons to the cart. The coupon code needs to be unique. There can't be two coupons with identical code exist in the cart at any given time."
      parameters:
        - $ref: '#/parameters/couponCodes'
      responses:
        '':
          description: 'Returns an empty object after the action was performed.'
          schema:
            $ref: '#/definitions/EmptyResult'
        'EUNKNOWN':
          description: 'An internal error occured.'
          schema:
            $ref: '#/definitions/UnknownError'
  /deleteCouponsFromCart_v1:
    post:
      tags:
        - Cart Coupons
      description: 'Deletes multiple coupons from the cart.'
      parameters:
        - $ref: '#/parameters/couponCodes'
      responses:
        '':
          description: 'Returns an empty object after the action was performed.'
          schema:
            $ref: '#/definitions/EmptyResult'
        'EUNKNOWN':
          description: 'An internal error occured.'
          schema:
            $ref: '#/definitions/UnknownError'
  /getCheckoutUrl_v1:
    post:
      tags:
        - Checkout
      responses:
        '':
          description: 'Returns the checkout url.'
          schema:
            $ref: '#/definitions/UrlResult'
          examples:
            application/json:
              url: 'http://example.com/'
              expires: '2017-12-31T23:59:59.999Z'
        'EUNKNOWN':
          description: 'An internal error occured.'
          schema:
            $ref: '#/definitions/UnknownError'
          examples:
            application/json:
              error:
                code: 'EUNKNOWN'
                message: 'An internal error occured.'

parameters:
  addProductsParam:
    name: products
    in: body
    required: true
    schema:
      type: array
      items:
        type: object
        properties:
          productId:
            type: string
            example: '10080466570'
          quantity:
            type: number
            example: 1
          properties:
            type: array
            items:
              $ref: '#/definitions/AddProductsProductProperty'
          metadata:
            type: object
            description: 'Holds additional information about a specific product of any type. The contents of the object can vary.'
            example:
              additionalInfo:
                is_parent: false
  updateCartItemsParam:
    name: CartItem
    in: body
    required: true
    schema:
      type: array
      items:
        type: object
        properties:
          cartItemId:
            type: string
          quantity:
            type: number
  cartItemIds:
    name: cartItemIds
    in: body
    required: true
    schema:
      type: array
      description: 'Id of the cart item to be deleted or modified.'
      items:
        type: string
  couponCodes:
    name: couponCodes
    in: body
    required: true
    schema:
      type: array
      description: 'Code of the coupon.'
      items:
        type: string

definitions:
  EmptyResult:
    type: object
    required:
      - output
    properties:
      output:
        type: object
  UrlResult:
    type: object
    required:
      - output
    properties:
      output:
        $ref: '#/definitions/Url'
  CartResult:
    type: object
    required:
      - output
    properties:
      output:
        $ref: '#/definitions/Cart'
  Cart:
    type: object
    required:
      - cartItems
      - currency
      - totals
      - flags
    properties:
      messages:
        type: array
        items:
          $ref: '#/definitions/Message'
      cartItems:
        type: array
        items:
          $ref: '#/definitions/CartItem'
      currency:
        $ref: '#/definitions/Currency'
      totals:
        type: array
        items:
          $ref: '#/definitions/CartTotal'
      text:
        $ref: '#/definitions/CartText'
      flags:
        $ref: '#/definitions/CartFlags'
  CartItem:
    type: object
    description: 'The cart item can be a product OR a coupon. The property `type` defines which one it is. The key `coupon` is not set if the type is `product` and vice versa.'
    required:
      - id
      - quantity
      - type
    properties:
      id:
        type: string
        description: 'Unique identifier of the cart item. It can be used to remove/manipulate the respective cart item.'
        example: 'a84de7d7-2b7d-4aa8-a64d-9558ca791b86'
      quantity:
        type: number
        description: 'Quantity of the cart item.'
        example: 5
      type:
        type: string
        enum:
          - 'product'
          - 'coupon'
        example: 'product'
      coupon:
        $ref: '#/definitions/CouponCartItem'
      product:
        $ref: '#/definitions/ProductCartItem'
      messages:
        type: array
        description: 'All messages specific to the current cart item.'
        items:
          $ref: '#/definitions/Message'
  CouponCartItem:
    $ref: '#/definitions/AppliedDiscount'
  ProductCartItem:
    type: object
    required:
      - id
      - name
      - featuredImageUrl
      - price
    properties:
      id:
        type: string
        description: 'The id of the product. It`s NOT a database id but the item_number, unique within the scope of a specific shop.'
        example: '10080466570'
      name:
        type: string
        description: 'Name of the product.'
        example: 'Awesome T-Shirt'
      addtionalInfo:
        type: array
        description: 'Some additional info for the product to be shown on the cart page. E.g. basePrice, SKU, weight, ...'
        items:
          type: object
          properties:
            label:
              type: string
              example: 'Manufacturer'
            value:
              type: string
              example: 'H&M'
      featuredImageUrl:
        type: string
        description: 'The image of the product.'
        example: 'https://myshop.example/images/product_xyz_featured.png'
      properties:
        type: array
        description: 'Selected properties of the current cart item.'
        items:
          $ref: '#/definitions/ProductCartItemProperty'
      price:
        $ref: '#/definitions/ProductCartItemPrice'
      appliedDiscounts:
        type: array
        description: 'All discouts applied to the current line item.'
        items:
          $ref: '#/definitions/AppliedDiscount'
  AppliedDiscount:
    type: object
    required:
      - discount
    properties:
      code:
        description: 'Code of the coupon.'
        type: string
        example: '20OFF'
      description:
        description: 'Description of the coupon.'
        type: string
        example: 'Reduces the cost of all products by 20%.'
      label:
        description: 'Label of the coupon.'
        type: string
        example: '20% off of all products.'
      discount:
        description: "Amounts to how much discount the coupon applies in percent or absolute. Note: This property is known as 'savedPrice' in early implementations."
        type: object
        properties:
          value:
            type: number
            example: 20
          type:
            type: string
            enum:
              - 'fixed'
              - 'percentage'
            example: 'percentage'
  ProductCartItemPrice:
    type: object
    required:
      - unit
      - default
    properties:
      unit:
        type: number
        description: 'Price of a single product. With or without tax, depending on the shop settings.'
        example: 10
      default:
        type: number
        description: 'The price of a single product multiplied by the quantity of he cart item WITHOUT any discounts. With or without tax, depending on the shop settings.'
        example: 50
      special:
        type: number
        description: "The special price of a single product multiplied by the cart item quantity. It's only set if a discount is applied to the product."
        example: 40
  ProductCartItemProperty:
    type: object
    required:
      - type
      - value
    properties:
      type:
        type: string
        enum:
          - 'option'
          - 'input'
        example: 'option'
      label:
        description: 'Display label of the property.'
        type: string
        example: Color
      value:
        type: string
        description: 'The selected value of the property.'
        example: 'Red'
  AddProductsProductProperty:
    type: object
    required:
      - type
      - id
      - value
    properties:
      type:
        type: string
        enum:
          - 'option'
          - 'input'
        example: 'input'
      id:
        description: 'Id of the property, to which the selection belongs to.'
        type: string
        example: '01-input-field.greeting-card-text'
      value:
        type: string
        description: "Content depends on the property type. It's either the value-id of a selected property value for options or the text that was entered for inputs."
        example: 'Happy Birthday, dad!'
  Currency:
    type: string
    enum:
      - 'EUR'
      - 'CHF'
      - 'USD'
      - 'RON'
      - 'PLN'
      - 'AUD'
      - 'GBP'
      - 'CAD'
      - 'SEK'
      - 'DKK'
      - 'NOK'
    example: 'USD'
  CartText:
    type: object
    description: 'Additional texts for the current cart like legal text. It can contain HTML content.'
    properties:
      legal:
        type: string
        example: 'By placing your order you agree to our <b><u>Privacy Policy</u></b>, our <b><u>Terms and Conditions</u></b> as well as our <b><u>Cancellation Policy</u></b>.'
  CartFlags:
    type: object
    required:
      - taxIncluded
      - orderable
      - coupons
    description: 'Additional information about the cart.'
    properties:
      taxIncluded:
        type: boolean
        description: 'Holds information about the cart prices being gross values or not.'
        default: false
      orderable:
        type: boolean
        description: 'Indicates if the current cart is orderable.'
        default: false
      coupons:
        type: boolean
        description: 'States if coupon functionality is enabled or not.'
        default: true
  Total:
    type: object
    required:
      - type
      - label
      - amount
    properties:
      type:
        type: string
        enum:
          - 'subTotal'
          - 'shipping'
          - 'tax'
          - 'payment'
          - 'discount'
          - 'grandTotal'
        example: 'tax'
      label:
        type: string
        example: 'Tax (19%)'
      amount:
        type: number
        example: 7.6
  CartTotal:
    type: object
    allOf:
      - $ref: '#/definitions/Total'
      - type: object
        properties:
          subTotals:
            type: array
            items:
              $ref: '#/definitions/Total'
  Message:
    type: object
    description: 'Message to be shown to the customer.'
    required:
      - type
      - message
    properties:
      type:
        type: string
        enum:
          - 'error'
          - 'warning'
          - 'info'
        example: 'error'
      message:
        type: string
        description: 'Message that is supposed to be displayed to the customer.'
        example: 'Some error occured.'
      code:
        type: string
        description: 'Message code, mapped by the extension. It can be used to react in a specific way for certain messages and/or to enable the possibility for message translations.'
        example: 'EUNKNOWN'
  Url:
    type: object
    required:
      - url
    properties:
      url:
        type: string
        description: 'A unified resource link..'
        example: 'http://example.com/'
      expires:
        type: string
        description: 'An optional date-time-string in the format ISO 8601 (YYYY-MM-DDTH:i:s.fZ). The url does not expire if this field os not set. The returned timezone is always UTC (+00:00)'
        example: '2017-12-31T23:59:59.999Z'
  UnknownError:
    type: object
    required:
      - error
    properties:
      error:
        type: object
        required:
          - code
        properties:
          code:
            type: string
            enum:
              - 'EUNKNOWN'
            example: 'EUNKNOWN'
          message:
            type: string
            example: 'An internal error occured.'
