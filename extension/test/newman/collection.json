{
	"info": {
		"_postman_id": "f7ee3a18-c1a9-4e79-96c0-14639f5611bd",
		"name": "Shopify Connect - Cart",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "shopgate.cart.addProducts.v1",
			"item": [
				{
					"name": "Create empty checkout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e507e68-cbfb-4409-8109-09e3e8f344be",
								"type": "text/javascript",
								"exec": [
									"pm.test('that the cart is empty', () => {",
									"    pm.expect(pm.response.json().checkout).to.be.an('object')",
									"    pm.expect(pm.response.json().checkout.line_items).to.be.an('array').and.empty",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"createNew\": true\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_shopify_checkout_get}}",
							"host": [
								"{{domain}}{{endpoint_cart_shopify_checkout_get}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add product with unlimited stock",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0c9ac79-82b8-4c41-8235-c9c18979152a",
								"type": "text/javascript",
								"exec": [
									"pm.test('that the request succeeded', () => {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.json()).to.be.an('object').and.empty",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"products\": [\n\t\t{\n\t\t\t\"productId\": \"{{product_id_unlimited_stock}}\",\n\t\t\t\"quantity\": 2\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_products_add}}",
							"host": [
								"{{domain}}{{endpoint_cart_products_add}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "530f83a8-51da-40d0-bbe1-eb0dde1c48ae",
								"type": "text/javascript",
								"exec": [
									"const response = pm.response.json()",
									"pm.test('that the cart is not empty anymore', () => {",
									"    pm.expect(response).to.be.an('object').and.not.empty",
									"    pm.expect(response.cartItems).to.be.an('array').and.not.empty",
									"    pm.expect(response.cartItems.length).to.equal(1)",
									"})",
									"",
									"const desiredItem = response.cartItems.find(item => item.product && item.product.id === pm.environment.get('product_id_unlimited_stock'))",
									"pm.test('that the product is in the cart', () => {",
									"    pm.expect(desiredItem).to.be.an('object').and.not.empty",
									"})",
									"",
									"pm.test('that the product\\'s quantity is 2', () => {",
									"    pm.expect(desiredItem.quantity).to.equal(2)",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_get}}",
							"host": [
								"{{domain}}{{endpoint_cart_get}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add more of product with unlimited stock",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0c9ac79-82b8-4c41-8235-c9c18979152a",
								"type": "text/javascript",
								"exec": [
									"pm.test('that the request succeeded', () => {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.json()).to.be.an('object').and.empty",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"products\": [\n\t\t{\n\t\t\t\"productId\": \"{{product_id_unlimited_stock}}\",\n\t\t\t\"quantity\": 2\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_products_add}}",
							"host": [
								"{{domain}}{{endpoint_cart_products_add}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ae318326-cea7-44f9-8935-0daf3ddf4954",
								"type": "text/javascript",
								"exec": [
									"const response = pm.response.json()",
									"pm.test('that the cart is not empty anymore', () => {",
									"    pm.expect(response).to.be.an('object').and.not.empty",
									"    pm.expect(response.cartItems).to.be.an('array').and.not.empty",
									"    pm.expect(response.cartItems.length).to.equal(1)",
									"})",
									"",
									"const desiredItem = response.cartItems.find(item => item.product && item.product.id === pm.environment.get('product_id_unlimited_stock'))",
									"pm.test('that the product is in the cart', () => {",
									"    pm.expect(desiredItem).to.be.an('object').and.not.empty",
									"})",
									"",
									"pm.test('that the product\\'s quantity is 4', () => {",
									"    pm.expect(desiredItem.quantity).to.equal(4)",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_get}}",
							"host": [
								"{{domain}}{{endpoint_cart_get}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add product with stock of 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0c9ac79-82b8-4c41-8235-c9c18979152a",
								"type": "text/javascript",
								"exec": [
									"pm.test('that the request succeeded', () => {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.json()).to.be.an('object').and.empty",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"products\": [\n\t\t{\n\t\t\t\"productId\": \"{{product_id_limited_stock_of_2}}\",\n\t\t\t\"quantity\": 2\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_products_add}}",
							"host": [
								"{{domain}}{{endpoint_cart_products_add}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5bcd0e5b-3a1b-4aef-a647-1263aff5496e",
								"type": "text/javascript",
								"exec": [
									"const response = pm.response.json()",
									"pm.test('that the cart is not empty anymore', () => {",
									"    pm.expect(response).to.be.an('object').and.not.empty",
									"    pm.expect(response.cartItems).to.be.an('array').and.not.empty",
									"    pm.expect(response.cartItems.length).to.equal(2)",
									"})",
									"",
									"pm.test('that the previously added product is still in the cart', () => {",
									"    const desiredCartItem = response.cartItems.find(item => item.product && item.product.id === pm.environment.get('product_id_unlimited_stock'))",
									"    pm.expect(desiredCartItem).to.be.an('object')",
									"})",
									"",
									"const desiredCartItem = response.cartItems.find(item => item.product && item.product.id === pm.environment.get('product_id_limited_stock_of_2'))",
									"pm.test('that the new product is in the cart', () => {",
									"    pm.expect(desiredCartItem).to.be.an('object')",
									"})",
									"",
									"pm.test('that the product\\'s quantity is 2', () => {",
									"    pm.expect(desiredCartItem.quantity).to.equal(2)",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_get}}",
							"host": [
								"{{domain}}{{endpoint_cart_get}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add product with insufficient stock",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74a4de5f-5e83-43e4-bc02-58de1d072754",
								"type": "text/javascript",
								"exec": [
									"const response = pm.response.json()",
									"pm.test('that the response contains \"messages\"', () => {",
									"    pm.expect(response).to.be.an('object').and.not.empty",
									"    pm.expect(response.messages).to.be.an('array').and.not.empty",
									"",
									"})",
									"",
									"pm.test('that the response contains exactly one error message', () => {",
									"    pm.expect(response.messages.length).to.equal(1)",
									"    pm.expect(response.messages[0]).to.be.an('object')",
									"    pm.expect(response.messages[0].type).to.equal('error')",
									"})",
									"",
									"pm.test('that the error code of that one message is EINSUFFICIENTSTOCK', () => {",
									"    pm.expect(response.messages[0].code).to.equal('EINSUFFICIENTSTOCK')",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"products\": [\n\t\t{\n\t\t\t\"productId\": \"{{product_id_limited_stock_of_2}}\",\n\t\t\t\"quantity\": 1\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_products_add}}",
							"host": [
								"{{domain}}{{endpoint_cart_products_add}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c79f4aef-b6ce-4024-85a3-2ff6eee22252",
								"type": "text/javascript",
								"exec": [
									"const response = pm.response.json()",
									"pm.test('that the cart is not empty anymore', () => {",
									"    pm.expect(response).to.be.an('object').and.not.empty",
									"    pm.expect(response.cartItems).to.be.an('array').and.not.empty",
									"    pm.expect(response.cartItems.length).to.equal(2)",
									"})",
									"",
									"const unlimitedStockCartItem = response.cartItems.find(item => item.product && item.product.id === pm.environment.get('product_id_unlimited_stock'))",
									"pm.test('that the first product is still in the cart', () => {",
									"    pm.expect(unlimitedStockCartItem).to.be.an('object')",
									"    pm.environment.set('cart-item-id-unlimited-stock', unlimitedStockCartItem.id)",
									"})",
									"",
									"pm.test('that the first product\\'s quantity is still 4', () => {",
									"    pm.expect(unlimitedStockCartItem.quantity).to.equal(4)",
									"})",
									"",
									"const limitedStockCartItem = response.cartItems.find(item => item.product && item.product.id === pm.environment.get('product_id_limited_stock_of_2'))",
									"pm.test('that the second product is still in the cart', () => {",
									"    pm.expect(limitedStockCartItem).to.be.an('object')",
									"    pm.environment.set('cart-item-id-limited-stock-of-2', limitedStockCartItem.id)",
									"})",
									"",
									"pm.test('that the second product\\'s quantity is still 2', () => {",
									"    pm.expect(limitedStockCartItem.quantity).to.equal(2)",
									"})",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_get}}",
							"host": [
								"{{domain}}{{endpoint_cart_get}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "997642ba-59c9-419d-81d2-04b2b3dca552",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d8e6655b-89b8-4988-ba87-fb37610f9b97",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "shopgate.cart.updateProducts.v1",
			"item": [
				{
					"name": "Update quantity of product with unlimited stock",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0c9ac79-82b8-4c41-8235-c9c18979152a",
								"type": "text/javascript",
								"exec": [
									"pm.test('that the request succeeded', () => {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.json()).to.be.an('object').and.empty",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"CartItem\": [\n\t\t{\n\t\t\t\"cartItemId\": \"{{cart-item-id-unlimited-stock}}\",\n\t\t\t\"quantity\": 2\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_products_update}}",
							"host": [
								"{{domain}}{{endpoint_cart_products_update}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ccc806ea-85d4-4372-811f-fcee89608efc",
								"type": "text/javascript",
								"exec": [
									"const response = pm.response.json()",
									"pm.test('that the cart is not empty', () => {",
									"    pm.expect(response).to.be.an('object').and.not.empty",
									"    pm.expect(response.cartItems).to.be.an('array').and.not.empty",
									"    pm.expect(response.cartItems.length).to.equal(2)",
									"})",
									"",
									"const unlimitedStockItem = response.cartItems.find(item => item.product && item.product.id === pm.environment.get('product_id_unlimited_stock'))",
									"pm.test('that the first product is still in the cart', () => {",
									"    pm.expect(unlimitedStockItem).to.be.an('object')",
									"    pm.environment.set('cart-item-id-unlimited-stock', unlimitedStockItem.id)",
									"})",
									"",
									"pm.test('that the first product\\'s quantity is 2', () => {",
									"    pm.expect(unlimitedStockItem.quantity).to.equal(2)",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_get}}",
							"host": [
								"{{domain}}{{endpoint_cart_get}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update quantity of both products, sufficient stock",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0c9ac79-82b8-4c41-8235-c9c18979152a",
								"type": "text/javascript",
								"exec": [
									"pm.test('that the request succeeded', () => {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.json()).to.be.an('object').and.empty",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"CartItem\": [\n\t\t{\n\t\t\t\"cartItemId\": \"{{cart-item-id-unlimited-stock}}\",\n\t\t\t\"quantity\": 10\n\t\t},\n\t\t{\n\t\t\t\"cartItemId\": \"{{cart-item-id-limited-stock-of-2}}\",\n\t\t\t\"quantity\": 1\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_products_update}}",
							"host": [
								"{{domain}}{{endpoint_cart_products_update}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f6458b2-23ff-4576-94ec-78ed10dc1ebc",
								"type": "text/javascript",
								"exec": [
									"const response = pm.response.json()",
									"pm.test('that the cart is not empty', () => {",
									"    pm.expect(response).to.be.an('object').and.not.empty",
									"    pm.expect(response.cartItems).to.be.an('array').and.not.empty",
									"    pm.expect(response.cartItems.length).to.equal(2)",
									"})",
									"",
									"const unlimitedStockItem = response.cartItems.find(item => item.product && item.product.id === pm.environment.get('product_id_unlimited_stock'))",
									"pm.test('that the first product is still in the cart', () => {",
									"    pm.expect(unlimitedStockItem).to.be.an('object')",
									"    pm.environment.set('cart-item-id-unlimited-stock', unlimitedStockItem.id)",
									"})",
									"",
									"pm.test('that the first product\\'s quantity is 10', () => {",
									"    pm.expect(unlimitedStockItem.quantity).to.equal(10)",
									"})",
									"",
									"const limitedStockItem = response.cartItems.find(item => item.product && item.product.id === pm.environment.get('product_id_limited_stock_of_2'))",
									"pm.test('that the second product is still in the cart', () => {",
									"    pm.expect(limitedStockItem).to.be.an('object')",
									"    pm.environment.set('cart-item-id-limited-stock-of-2', limitedStockItem.id)",
									"})",
									"",
									"pm.test('that the second product\\'s quantity is 1', () => {",
									"    pm.expect(limitedStockItem.quantity).equals(1)",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_get}}",
							"host": [
								"{{domain}}{{endpoint_cart_get}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update quantity of both products, insufficient stock",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c07c052b-4a15-488d-bb95-7a90a808fb79",
								"type": "text/javascript",
								"exec": [
									"const response = pm.response.json()",
									"pm.test('that the response contains \"messages\"', () => {",
									"    pm.expect(response).to.be.an('object').and.not.empty",
									"    pm.expect(response.messages).to.be.an('array').and.not.empty",
									"",
									"})",
									"",
									"pm.test('that the response contains exactly one error message', () => {",
									"    pm.expect(response.messages.length).to.equal(1)",
									"    pm.expect(response.messages[0]).to.be.an('object')",
									"    pm.expect(response.messages[0].type).to.equal('error')",
									"})",
									"",
									"pm.test('that the error code of that one message is EINSUFFICIENTSTOCK', () => {",
									"    pm.expect(response.messages[0].code).to.equal('EINSUFFICIENTSTOCK')",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"CartItem\": [\n\t\t{\n\t\t\t\"cartItemId\": \"{{cart-item-id-unlimited-stock}}\",\n\t\t\t\"quantity\": 7\n\t\t},\n\t\t{\n\t\t\t\"cartItemId\": \"{{cart-item-id-limited-stock-of-2}}\",\n\t\t\t\"quantity\": 5\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_products_update}}",
							"host": [
								"{{domain}}{{endpoint_cart_products_update}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2609129-b601-4d24-afac-e646ebbcc316",
								"type": "text/javascript",
								"exec": [
									"const response = pm.response.json()",
									"pm.test('that the cart is not empty', () => {",
									"    pm.expect(response).to.be.an('object').and.not.empty",
									"    pm.expect(response.cartItems).to.be.an('array').and.not.empty",
									"    pm.expect(response.cartItems.length).to.equal(2)",
									"})",
									"",
									"const unlimitedStockItem = response.cartItems.find(item => item.product && item.product.id === pm.environment.get('product_id_unlimited_stock'))",
									"pm.test('that the first product is still in the cart', () => {",
									"    pm.expect(unlimitedStockItem).to.be.an('object')",
									"    pm.environment.set('cart-item-id-unlimited-stock', unlimitedStockItem.id)",
									"})",
									"",
									"pm.test('that the first product\\'s quantity still is 10', () => {",
									"    pm.expect(unlimitedStockItem.quantity).to.equal(10)",
									"})",
									"",
									"const limitedStockItem = response.cartItems.find(item => item.product && item.product.id === pm.environment.get('product_id_limited_stock_of_2'))",
									"pm.test('that the second product is still in the cart', () => {",
									"    pm.expect(limitedStockItem).to.be.an('object')",
									"    pm.environment.set('cart-item-id-limited-stock-of-2', limitedStockItem.id)",
									"})",
									"",
									"pm.test('that the second product\\'s quantity still is 1', () => {",
									"    pm.expect(limitedStockItem.quantity).equals(1)",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_get}}",
							"host": [
								"{{domain}}{{endpoint_cart_get}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clear cart & clean up",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3460a049-ae86-437c-8910-b7a85f2beb65",
								"type": "text/javascript",
								"exec": [
									"pm.test('that the cart is empty', () => {",
									"    pm.expect(pm.response.json().checkout).to.be.an('object')",
									"    pm.expect(pm.response.json().checkout.line_items).to.be.an('array').and.empty",
									"})",
									"",
									"pm.environment.unset('cart-item-id-limited-stock-of-2')",
									"pm.environment.unset('cart-item-id-unlimited-stock')"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"createNew\": true\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_shopify_checkout_get}}",
							"host": [
								"{{domain}}{{endpoint_cart_shopify_checkout_get}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "997642ba-59c9-419d-81d2-04b2b3dca552",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d8e6655b-89b8-4988-ba87-fb37610f9b97",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "shopgate.cart.deleteProducts.v1",
			"item": [
				{
					"name": "Create empty checkout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e507e68-cbfb-4409-8109-09e3e8f344be",
								"type": "text/javascript",
								"exec": [
									"pm.test('that the cart is empty', () => {",
									"    pm.expect(pm.response.json().checkout).to.be.an('object')",
									"    pm.expect(pm.response.json().checkout.line_items).to.be.an('array').and.empty",
									"})"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"createNew\": true\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_shopify_checkout_get}}",
							"host": [
								"{{domain}}{{endpoint_cart_shopify_checkout_get}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add first product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0c9ac79-82b8-4c41-8235-c9c18979152a",
								"exec": [
									"pm.test('that the request succeeded', () => {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.json()).to.be.an('object').and.empty",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"products\": [\n\t\t{\n\t\t\t\"productId\": \"{{product_id_unlimited_stock}}\",\n\t\t\t\"quantity\": 1\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_products_add}}",
							"host": [
								"{{domain}}{{endpoint_cart_products_add}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add second product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74a4de5f-5e83-43e4-bc02-58de1d072754",
								"exec": [
									"pm.test('that the request succeeded', () => {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.json()).to.be.an('object').and.empty",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"products\": [\n\t\t{\n\t\t\t\"productId\": \"{{product_id_limited_stock_of_2}}\",\n\t\t\t\"quantity\": 1\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_products_add}}",
							"host": [
								"{{domain}}{{endpoint_cart_products_add}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check products were added",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "530f83a8-51da-40d0-bbe1-eb0dde1c48ae",
								"exec": [
									"const response = pm.response.json()",
									"pm.test('that the cart is not empty anymore', () => {",
									"    pm.expect(response).to.be.an('object').and.not.empty",
									"    pm.expect(response.cartItems).to.be.an('array').and.not.empty",
									"    pm.expect(response.cartItems.length).to.equal(2)",
									"})",
									"",
									"const firstStockItem = response.cartItems.find(item => item.product && item.product.id === pm.environment.get('product_id_unlimited_stock'))",
									"pm.test('that the first product is in the cart', () => {",
									"    pm.expect(firstStockItem).to.be.an('object')",
									"    pm.environment.set('cart-item-id-first-product', firstStockItem.id)",
									"})",
									"",
									"const secondStockItem = response.cartItems.find(item => item.product && item.product.id === pm.environment.get('product_id_limited_stock_of_2'))",
									"pm.test('that the second product is in the cart', () => {",
									"    pm.expect(secondStockItem).to.be.an('object')",
									"    pm.environment.set('cart-item-id-second-product', secondStockItem.id)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_get}}",
							"host": [
								"{{domain}}{{endpoint_cart_get}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete first product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0c9ac79-82b8-4c41-8235-c9c18979152a",
								"exec": [
									"pm.test('that the request succeeded', () => {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.json()).to.be.an('object').and.empty",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"CartItemIds\": [\n\t\t\"{{cart-item-id-first-product}}\"\n\t]\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_products_delete}}",
							"host": [
								"{{domain}}{{endpoint_cart_products_delete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check first product was deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ae318326-cea7-44f9-8935-0daf3ddf4954",
								"exec": [
									"const response = pm.response.json()",
									"pm.test('that the cart is not empty', () => {",
									"    pm.expect(response).to.be.an('object').and.not.empty",
									"    pm.expect(response.cartItems).to.be.an('array').and.not.empty",
									"    pm.expect(response.cartItems.length).to.equal(1)",
									"})",
									"",
									"const firstStockItem = response.cartItems.filter(item => item.id === pm.environment.get('cart-item-id-first-product'))",
									"",
									"pm.test('that the first product is not in the cart anymore', () => {",
									"    pm.expect(firstStockItem).to.be.empty",
									"})",
									"",
									"const secondStockItem = response.cartItems.find(item => item.id === pm.environment.get('cart-item-id-second-product'))",
									"",
									"pm.test('that the second product is still in the cart', () => {",
									"    pm.expect(secondStockItem).to.be.an('object')",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_get}}",
							"host": [
								"{{domain}}{{endpoint_cart_get}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete second product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0c9ac79-82b8-4c41-8235-c9c18979152a",
								"exec": [
									"pm.test('that the request succeeded', () => {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.json()).to.be.an('object').and.empty",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"CartItemIds\": [\n\t\t\"{{cart-item-id-second-product}}\"\n\t]\n}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_products_delete}}",
							"host": [
								"{{domain}}{{endpoint_cart_products_delete}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check second product was deleted & cleanup Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ae318326-cea7-44f9-8935-0daf3ddf4954",
								"exec": [
									"const response = pm.response.json()",
									"pm.test('that the cart is empty again', () => {",
									"    pm.expect(response).to.be.an('object').and.not.empty",
									"    pm.expect(response.cartItems).to.be.an('array').and.empty",
									"})",
									"",
									"pm.environment.unset('cart-item-id-first-product')",
									"pm.environment.unset('cart-item-id-second-product')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{domain}}{{endpoint_cart_get}}",
							"host": [
								"{{domain}}{{endpoint_cart_get}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "997642ba-59c9-419d-81d2-04b2b3dca552",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d8e6655b-89b8-4988-ba87-fb37610f9b97",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "3ce03b4f-1f37-4d4a-86f5-22346273e1fe",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "fe1e716a-968b-48e0-9ba4-ecb289a7b176",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}